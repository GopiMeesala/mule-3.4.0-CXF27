<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
    xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/${MuleMajorMinorVersion}/mule.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/${MuleMajorMinorVersion}/mule-vm.xsd
        http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/${MuleMajorMinorVersion}/mule-test.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <!--
    TODO: You can define a test configuration here then from the ${ModuleName}TestCase you can fire events into
    Mule (using the MuleClient) and then assert the results.
    -->
    <flow name="main">
        <vm:inbound-endpoint path="in" exchange-pattern="request-response"/>

        <!-- TODO add your service component here. This can also be a Spring bean using <spring-object bean="name"/> -->
        <test:component appendString=" Received"/>

        <vm:outbound-endpoint path="out"/>
    </flow>
</mule>
