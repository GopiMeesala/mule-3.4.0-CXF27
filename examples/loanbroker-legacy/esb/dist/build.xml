<!--
 Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com

 The software in this package is published under the terms of the CPAL v1.0
 license, a copy of which has been included with this distribution in the
 LICENSE.txt file.
-->
<project name="Mule Examples: Loan Broker ESB" default="deploy" basedir=".">

    <property name="app.name" value="mule-example-loanbroker-esb"/>
    <property environment="env"/>

    <property name="dir.java" value="src"/>
    <property name="dir.conf" value="conf"/>
    <property name="dir.build" value="target"/>
    <property name="dir.classes" value="${dir.build}/classes"/>
    <property name="dir.common.tests" value="../common-tests"/>
    <property name="esb.instance.name" value="loanbroker-esb"/>
    <property name="ejb.instance.name" value="loanbroker-ejb"/>
    <property name="domain" value="loanbroker"/>

    <property name="url.maven.repo" value="http://repo1.maven.org/maven2"/>
    <property name="url.maven.repo2" value="https://maven.atlassian.com/repository/public/"/>

    <target name="clean"
            description="Clean the output directory (start from scratch)."
            depends="set-paths">        
        <delete dir="${dir.build}"/>
        <delete dir="${dir.ejb.app}"/>
        <delete dir="${dir.esb.app}"/>
    </target>

    <!-- Download any additional libraries needed to run the application -->
    <target name="get.libraries">
        <!-- ActiveMQ -->            
        <get src="${url.maven.repo2}/org/apache/activemq/activemq-core/4.1.2/activemq-core-4.1.2.jar"
             dest="${dir.user.lib}/activemq-core-4.1.2.jar"
             verbose="true"
             usetimestamp="true"/>

        <!-- OpenEJB -->
        <get src="${url.maven.repo}/openejb/openejb-core/1.0/openejb-core-1.0.jar"
             dest="${dir.user.lib}/openejb-core-1.0.jar"
             verbose="true"
             usetimestamp="true"/>
        <get src="${url.maven.repo}/castor/castor/1.0/castor-1.0.jar"
             dest="${dir.user.lib}/castor-1.0.jar"
             verbose="true"
             usetimestamp="true"/>
    </target>

    <target name="init" depends="set-paths">

       <ant dir="${dir.common.tests}" antfile="build.xml" inheritall="false" inheritrefs="false"/>   
           
        <!-- Create the build directory if it doesn't exist -->
        <mkdir dir="${dir.classes}"/>

        <!-- Configure Mule classpath (mirrors wrapper.conf settings -->
        <path id="classpath.mule">
            <pathelement location="${dir.mule.home}/conf"/>
            <fileset dir="${dir.mule.home}/lib/user">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib/mule">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib/opt">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib">
                <include name="**/*.jar"/>
            </fileset>
            <!-- Include dependent test jar-->
            <fileset dir="${dir.common.tests}/${dir.build}">
                <include name="*.jar"/>
            </fileset>
        </path>
    </target>

    <target name="compile"
            depends="init"
            description="Compile the application.">
            
        <javac srcdir="${dir.java}"
               destdir="${dir.classes}"
               debug="true"
               source="1.5"
               target="1.5">
            <classpath refid="classpath.mule"/>
        </javac>
        
        <!-- Copy all resources to the output folder as well -->
        <copy todir="${dir.classes}">
            <fileset dir="${dir.conf}"/>
        </copy>
    </target>

   <target name="package" 
           depends="compile" 
           description="Package the application">
           
        <jar jarfile="${dir.build}/${app.name}.jar" >
            <fileset dir="${dir.classes}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${dir.java}/main/resources">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${dir.conf}">
                <include name="**/*"/>
            </fileset>
        </jar>
   </target>

   <target name="deploy" 
           depends="package" 
           description="Deploy the application to the Mule server">

       <mkdir dir="${dir.ejb.app}" />
       <mkdir dir="${dir.esb.app}" />
       <mkdir dir="${dir.common.deploy}" />       

       <copy file="${dir.build}/${app.name}.jar" todir="${dir.esb.app}/lib" overwrite="true" verbose="true"/>
          <copy file="${dir.build}/${app.name}.jar" todir="${dir.ejb.app}/lib" overwrite="true" verbose="true"/>
       
       <copy tofile="${dir.esb.app}/mule-config.xml" file="${basedir}/target/classes/loan-broker-esb-mule-config.xml" overwrite="true" verbose="true"/>
       <copy todir="${dir.esb.app}" file="${dir.java}/main/resources/mule-deploy.properties" overwrite="true" verbose="true"/>
       <copy tofile="${dir.ejb.app}/mule-config.xml" file="${basedir}/target/classes/loan-broker-esb-mule-config-with-ejb-container.xml" overwrite="true" verbose="true"/>
       <copy todir="${dir.ejb.app}" file="${dir.java}/main/resources/mule-deploy.properties" overwrite="true" verbose="true"/>
   </target>

   <target name="setup">
      <fail message="MULE_HOME environment variable has not been set.">
       <condition>
        <or>
         <equals arg1="${env.MULE_HOME}" arg2=""/>
          <!-- Using a trick here. If there was no MULE_HOME environment 
               variable set, ant will set the value to the unprocessed 
               template string -->
          <equals arg1="${env.MULE_HOME}" arg2="$${env.MULE_HOME}"/>
         </or>
        </condition>
      </fail>
   </target>

   <target name="set-paths">
      <property name="dir.mule.home" value="${basedir}/../.."/>
      <property name="dir.user.lib" value="${dir.mule.home}/lib/user/"/>
      <property name="dir.common.deploy" value="${dir.mule.home}/lib/shared/${domain}/"/>
      <property name="dir.ejb.app" value="${dir.mule.home}/apps/${ejb.instance.name}"/>
      <property name="dir.esb.app" value="${dir.mule.home}/apps/${esb.instance.name}"/>
   </target>
    
    <target name="test" depends="compile">
        <junit haltonerror="true" haltonfailure="true">
            <classpath>
                <pathelement location="${dir.build}/classes"/>
                <pathelement location="${dir.java}/test/resources"/>
                <path refid="classpath.mule"/>
            </classpath>
            <formatter type="plain" usefile="false"/>
            <batchtest fork="yes" todir="${dir.build}">
                <fileset dir="${dir.java}/test/java">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>    
</project>
