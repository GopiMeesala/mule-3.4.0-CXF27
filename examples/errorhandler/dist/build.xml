<!--
 Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com

 The software in this package is published under the terms of the CPAL v1.0
 license, a copy of which has been included with this distribution in the
 LICENSE.txt file.
-->
<project name="Mule Examples: Error Handler" default="deploy" basedir=".">

    <property name="dir.mule.home" value="${basedir}/../.."/>
    <property name="dir.mule.lib" value="${dir.mule.home}/lib/mule/"/>
    <property name="dir.opt.lib" value="${dir.mule.home}/lib/opt/"/>

    <property name="dir.java" value="src"/>
    <property name="dir.conf" value="conf"/>
    <property name="dir.resources" value="${dir.java}/main/resources"/>
    <property name="dir.build" value="target"/>
    <property name="dir.classes" value="${dir.build}/classes"/>

    <property name="app.name" value="mule-example-errorhandler"/>
    <property name="app.jar" value="${dir.build}/${app.name}.jar"/>
    <property name="app.file" value="${app.name}.zip"/>
    
    <property environment="env"/>


    <property name="url.maven.repo" value="http://repo1.maven.org/maven2"/>
    <property name="url.maven.repo2" value="https://maven.atlassian.com/repository/public/"/>

    <path id="anttasks.path">
        <fileset dir="${dir.mule.lib}" includes="mule-tools-anttasks-*.jar"/>
    </path>
    <taskdef resource="org/mule/mulePackagingTasks.properties"
              classpathref="anttasks.path"/>


    <target name="clean"
            description="Clean the output directory (start from scratch).">
        <delete dir="${dir.build}"/>
    </target>

    <!-- Download any additional libraries needed to run the application -->
    <target name="get.libraries">
        <mkdir dir="${dir.build}/lib"/>
        <get src="${url.maven.repo2}/org/apache/activemq/activemq-core/5.5.0/activemq-core-5.5.0.jar"
             dest="${dir.build}/activemq-core-5.5.0.jar"
             verbose="true"
             usetimestamp="true"/>
    </target>

    <target name="init" depends="get.libraries">

        <!-- Create the build directory if it doesn't exist -->
        <mkdir dir="${dir.classes}"/>

        <!-- Configure Mule classpath (mirrors wrapper.conf settings -->
        <path id="classpath.mule">
            <pathelement location="${dir.mule.home}/conf"/>
            <fileset dir="${dir.mule.home}/lib/user">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib/mule">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib/opt">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </target>

    <target name="compile"
            depends="init"
            description="Compile the application.">

        <javac srcdir="${dir.java}"
               destdir="${dir.classes}"
               debug="true"
               source="1.5"
               target="1.5"
               includeAntRuntime="false">
            <classpath refid="classpath.mule"/>
        </javac>

        <!-- Copy all resources to the output folder as well -->
        <copy todir="${dir.classes}">
            <fileset dir="${dir.resources}"/>
            <fileset dir="src/main/app"/>
        </copy>
    </target>

    <target name="jar"
            depends="compile"
            description="build the application jar">

        <jar jarfile="${dir.build}/${app.name}.jar"
             basedir="${dir.classes}"/>
    </target>

    <target name="package"
            depends="jar"
            description="Package the application">

        <mulePackage applicationFile="${app.file}">
            <config dir="src/main/app"/>
            <lib dir="${dir.build}">
                <include name ="**/*.jar"/>
            </lib>
        </mulePackage>

    </target>

    <target name="deploy" 
           depends="package, test" 
           description="Deploy the application to the Mule server">

        <muleDeploy applicationFile="${app.file}" />
    </target>

    <target name="test" depends="compile">
        <junit haltonerror="true" haltonfailure="true">
            <classpath>
                <pathelement location="${dir.build}/classes"/>
                <pathelement location="${dir.java}/test/resources"/>
                <path refid="classpath.mule"/>
                <path>
                    <fileset dir="${dir.build}">
                        <include name="**/*.jar"/>
                    </fileset>
                </path>
            </classpath>
            <formatter type="plain" usefile="false"/>
            <batchtest fork="yes" todir="${dir.build}">
                <fileset dir="${dir.java}/test/java">
                    <include name="**/*TestCase.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

</project>
